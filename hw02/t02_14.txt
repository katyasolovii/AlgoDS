def a(n): 
    s = 0                          | O(1)
    for i in range(1, n + 1):      | O(n)
        s += i                     | O(n)
    return s                       | O(1)

res: O(n)

def b(n):
    s = 0                          | O(1)
    for i in range(1, n + 1):      | O(n)
        s += i * i                 | O(n)
    return s                       | O(1)

res: O(n)

def c(n, a):
    s = 0                     
    for i in range(1, n + 1):     
        s += a**i                 
    return s                      
 
res: O(n)

def d(n):
    s = 0                     
    for i in range(1, n + 1):   
        for j in range(1, n + 1):  
            if j == i:             
                s += j**i          
    return s                    

res: O(n^2)

def e(n):
    p = 1
    for i in range(1, n + 1):
        p *= 1 / (1 + i)
    return p
            
res: O(n)

def f(n):
    p = 1
    f = 1
    for i in range(1, n + 1):
        f *= i
        p *= 1 / (1 + f)
    return p

res: O(n)
# math.factorial(i) - O(i) , і буде O(n^2) -> на жаль, не підходить

def g(n, a):
    p = 1
    f = 1
    for i in range(1, n + 1):
        f *= i
        p *= a**i / (1 + f)
    return p

res: O(n)

def h(n, m): 
    p = 1                               | O(1)
    for i in range(1, n + 1):           | O(n)
        q = 1                           | O(n)
        for j in range(1, m + 1):       | O(m)
            q *= i                      | O(m)
        p *= 1 / (1 + q)                | O(n)
    return p                            | O(1)

res: O(nm)

def i(n):
    p = 1
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if j == i:
                s *= 1 / (1 + j**i)
    return p

res: O(n^2)
