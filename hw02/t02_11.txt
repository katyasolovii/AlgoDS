def g(n):
    sum = 0                       | O(1)
    for i in range(1, n + 1):     | O(n^2)
        sum = sum + i + f(i)      | O(n^2)
        # викликається f(i) = O(i) <- f(n) = O(n)
    return sum                    | O(1)

0 + 1 + O(1) + 2 + O(2) + 3 + O(3) + 4 + O(4) + ... + n + O(n) = O((n * (n + 1) / 2)) ->
-> O(n^2)

res: O(n^2)

функція g(n) = сума чисел i + результат функції f(i), 1 <= i <= n

0 + 1 + 1 + 2 + (1 + 2) + 3 + (1 + 2 + 3) + 4 + (1 + 2 + 3 + 4) + ... + n + (1 + 2 + ... + n)

sum{i=1}_{n} i + f(i) = sum{i=1}_{n} i + i(i + 1) / 2 = sum{i=1}_{n} i + (i^2 + i) / 2 = 
= sum{i=1}_{n} i +  sum{i=1}_{n} i^2 / 2 + sum{i=1}_{n} i / 2 = n(n + 1) / 2 + 
+ n(n + 1)(2n + 1) / 12 + n(n + 1) / 4 = (n^3 + 6n^2 + 5n) / 6

Оптимізація функції
def g(n):
    return (n**3 + 6*n**2 + 5*n) // 6    | O(1)
